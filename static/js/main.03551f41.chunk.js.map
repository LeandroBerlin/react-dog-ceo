{"version":3,"sources":["logo.svg","sagas/index.js","actions/actionTypes.js","reducers/index.js","store/index.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","watcherSaga","workerSaga","regenerator_default","a","wrap","_context","prev","next","takeLatest","stop","_marked","fetchDog","axios","method","url","response","dog","_context2","call","sent","data","message","put","type","t0","error","_marked2","API_CALL_REQUEST","API_CALL_SUCCESS","API_CALL_FAILURE","initialState","fetching","sagaMiddleware","createSagaMiddleware","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","state","arguments","length","undefined","action","Object","objectSpread","compose","applyMiddleware","run","App","_this$props","this","props","onRequestDog","react_default","createElement","className","src","logo","alt","disabled","onClick","style","color","Component","connect","dispatch","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.03551f41.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\n// import saga\nimport { takeLatest, call, put } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n// watcher saga: watches for actions dispatched to the store, starts worker saga\nexport function* watcherSaga() {\n    yield takeLatest(\"API_CALL_REQUEST\", workerSaga);\n}\n\n// function that makes the api request and returns a Promise for response\nfunction fetchDog() {\n    return axios({\n        method: \"get\",\n        url: \"https://dog.ceo/api/breeds/image/random\"\n    });\n\n    /**\n     * Instead of \n     * const fetchDog = () => {\n     * return fetch('https://dog.ceo/api/breeds/image/random')\n     * };\n     * \n     */\n\n\n\n}\n\n// worker saga: makes the api call when watcher saga sees the action\nfunction* workerSaga() {\n    try {\n        const response = yield call(fetchDog);\n        const dog = response.data.message;\n\n        // dispatch a success action to the store with the new dog\n        yield put({ type: \"API_CALL_SUCCESS\", dog });\n\n    } catch (error) {\n        // dispatch a failure action to the store with the error\n        yield put({ type: \"API_CALL_FAILURE\", error });\n    }\n}\n","export const API_CALL_REQUEST = \"API_CALL_REQUEST\";\nexport const API_CALL_SUCCESS = \"API_CALL_SUCCESS\";\nexport const API_CALL_FAILURE = \"API_CALL_FAILURE\";","\n// import the actions we defined\nimport { API_CALL_REQUEST, API_CALL_SUCCESS, API_CALL_FAILURE } from '../actions/actionTypes'\n\n// define an initial state\nconst initialState = {\n    fetching: false,\n    dog: null,\n    error: null\n};\n\n// the reducer\nexport function reducer(state = initialState, action) {\n    switch (action.type) {\n        case API_CALL_REQUEST:\n            return { ...state, fetching: true, error: null };\n        case API_CALL_SUCCESS:\n            return { ...state, fetching: false, dog: action.dog };\n        case API_CALL_FAILURE:\n            return { ...state, fetching: false, dog: null, error: action.error };\n        default:\n            return state;\n    }\n}","\n// import Redux store methods\nimport { createStore, applyMiddleware, compose } from 'redux'\n// import Saga middleware\nimport createSagaMiddleware from 'redux-saga'\n// import watcher from saga file we created\nimport { watcherSaga } from '../sagas'\n// import the Reducer\nimport { reducer } from '../reducers'\n\n// create a Saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// dev tools middleware\nconst reduxDevTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\n// create a Redux store using the Reducer and connect the Saga middleware to the Redux store + DevTools\nexport const store = createStore(\n    reducer,\n    compose(applyMiddleware(sagaMiddleware), reduxDevTools)\n);\n\n// run the watcher\nsagaMiddleware.run(watcherSaga);\n\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\n\n// import React bindings for Redux\nimport { connect } from \"react-redux\";\n\nclass App extends Component {\n  render() {\n    // Destructuring assignment from Props\n    const { fetching, dog, onRequestDog, error } = this.props;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={dog || logo} className=\"App-logo rounded\" alt=\"logo\" />\n          <h1 className=\"App-title\">The Dog Saga</h1>\n\n\n          {dog ? (\n            <p className=\"App-intro\">Keep clicking for new dogs</p>\n          ) : (\n              <p className=\"App-intro\">Replace the React icon with a dog!</p>\n            )}\n\n          {fetching ? (\n            <button className=\"btn btn-warning\" disabled>Fetching...</button>\n          ) : (\n              <button className=\"btn btn-primary\" onClick={onRequestDog}>Request a Dog</button>\n            )}\n\n          {error && <p style={{ color: \"red\" }}>Uh oh - something went wrong!</p>}\n        </header>\n      </div>\n    );\n  }\n}\n\n// Extracting Data with mapStateToProps\nconst mapStateToProps = state => {\n  return {\n    fetching: state.fetching,\n    dog: state.dog,\n    error: state.error\n  };\n};\n\n// Dispatching actions with mapDispatchToProps\nconst mapDispatchToProps = dispatch => {\n  return {\n    onRequestDog: () => dispatch({ type: \"API_CALL_REQUEST\" })\n  };\n};\n\n// the connect() function connects the React component to the Redux store.\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// import React bindings for Redux\nimport { Provider } from \"react-redux\";\n// import the store\nimport { store } from \"./store\"\n// import App\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}